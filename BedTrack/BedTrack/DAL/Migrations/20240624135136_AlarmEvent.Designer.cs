// <auto-generated />
using System;
using BedTrack.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BedTrack.Migrations
{
    [DbContext(typeof(BedTrackContext))]
    [Migration("20240624135136_AlarmEvent")]
    partial class AlarmEvent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BedTrack.Domain.Models.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.ClinicDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("ClinicDepartments");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.ClinicDepartmentBed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BedId")
                        .HasColumnType("int");

                    b.Property<int>("ClinicDepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BedId");

                    b.HasIndex("ClinicDepartmentId");

                    b.ToTable("ClinicDepartmentBeds");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Alarm")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int>("ClinicDepartmentBedId")
                        .HasColumnType("int");

                    b.Property<string>("HealthHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthRecord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Insurance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicDepartmentBedId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.UserEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEvents");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.UserPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPatients");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.ClinicDepartment", b =>
                {
                    b.HasOne("BedTrack.Domain.Models.Clinic", "Clinic")
                        .WithMany("ClinicDepartments")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BedTrack.Domain.Models.Department", "Department")
                        .WithMany("ClinicDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.ClinicDepartmentBed", b =>
                {
                    b.HasOne("BedTrack.Domain.Models.Bed", "Bed")
                        .WithMany("ClinicDepartmentBeds")
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BedTrack.Domain.Models.ClinicDepartment", "ClinicDepartment")
                        .WithMany("ClinicDepartmentBeds")
                        .HasForeignKey("ClinicDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("ClinicDepartment");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.Patient", b =>
                {
                    b.HasOne("BedTrack.Domain.Models.ClinicDepartmentBed", "ClinicDepartmentBeds")
                        .WithMany("Patients")
                        .HasForeignKey("ClinicDepartmentBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicDepartmentBeds");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.User", b =>
                {
                    b.HasOne("BedTrack.Domain.Models.Clinic", "Clicnic")
                        .WithMany("User")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BedTrack.Domain.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clicnic");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.UserEvent", b =>
                {
                    b.HasOne("BedTrack.Domain.Models.Event", "Event")
                        .WithMany("AlarmEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BedTrack.Domain.Models.User", "User")
                        .WithMany("AlarmEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.UserPatient", b =>
                {
                    b.HasOne("BedTrack.Domain.Models.Patient", "Patient")
                        .WithMany("Users")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BedTrack.Domain.Models.User", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.Bed", b =>
                {
                    b.Navigation("ClinicDepartmentBeds");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.Clinic", b =>
                {
                    b.Navigation("ClinicDepartments");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.ClinicDepartment", b =>
                {
                    b.Navigation("ClinicDepartmentBeds");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.ClinicDepartmentBed", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.Department", b =>
                {
                    b.Navigation("ClinicDepartments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.Event", b =>
                {
                    b.Navigation("AlarmEvents");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.Patient", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BedTrack.Domain.Models.User", b =>
                {
                    b.Navigation("AlarmEvents");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
